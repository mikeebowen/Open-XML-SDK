// <auto-generated/>

// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.

#nullable enable

using DocumentFormat.OpenXml;
using DocumentFormat.OpenXml.Framework;
using DocumentFormat.OpenXml.Framework.Metadata;
using DocumentFormat.OpenXml.Packaging;
using DocumentFormat.OpenXml.Validation.Schema;
using System;
using System.Collections.Generic;
using System.IO.Packaging;

namespace DocumentFormat.OpenXml.Office.SpreadSheetML.Y2025.ExternalCodeService2
{
    /// <summary>
    /// <para>Defines the ExternalCodeServiceImageAsInput Class.</para>
    /// <para>This class is available in Microsoft365 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is xlecs2:externalCodeServiceImageAsInput.</para>
    /// </summary>
    public partial class ExternalCodeServiceImageAsInput : OpenXmlLeafElement
    {
        #pragma warning disable CS0109
        internal static readonly new OpenXmlQualifiedName ElementQName = new("http://schemas.microsoft.com/office/spreadsheetml/2025/externalCodeService2", "externalCodeServiceImageAsInput");
        internal static readonly new OpenXmlQualifiedName ElementTypeName = new("http://schemas.microsoft.com/office/spreadsheetml/2025/externalCodeService2", "CT_ExternalCodeServiceImageAsInput");
        internal static readonly new OpenXmlSchemaType ElementType = new(ElementQName, ElementTypeName);
        #pragma warning restore CS0109

        /// <summary>
        /// Initializes a new instance of the ExternalCodeServiceImageAsInput class.
        /// </summary>
        public ExternalCodeServiceImageAsInput() : base()
        {
        }

        /// <summary>
        /// <para>maxWidth, this property is only available in Microsoft365 and later.</para>
        /// <para>Represents the following attribute in the schema: maxWidth</para>
        /// </summary>
        public UInt32Value? MaxWidth
        {
            get => GetAttribute<UInt32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>maxHeight, this property is only available in Microsoft365 and later.</para>
        /// <para>Represents the following attribute in the schema: maxHeight</para>
        /// </summary>
        public UInt32Value? MaxHeight
        {
            get => GetAttribute<UInt32Value>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(ElementType);
            builder.Availability = FileFormatVersions.Microsoft365;
            builder.AddElement<ExternalCodeServiceImageAsInput>()
                .AddAttribute("maxWidth", a => a.MaxWidth)
                .AddAttribute("maxHeight", a => a.MaxHeight);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ExternalCodeServiceImageAsInput>(deep);
    }
}